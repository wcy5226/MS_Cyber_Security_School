/*
변수의 종류
 - 지역변수 : 특정 지역(함수, 제어문 등)에서 선언된 변수, 해당 지역에서만 접근 가능한 변수
  -> 지역변수는 함수가 호출될 때 생성되고, 함수가 종료되면 소멸됨
 - 전역변수 : 모든 지역에서 접근 가능한 변수, 프로그램이 종료될 때까지 유지되는 변수
  -> 전역변수는 프로그램 전체에서 공유됨
 - 정적변수 : 함수가 종료되어도 값이 유지되는 변수(static), 초기화가 한번만 수행됨,
  -> 정적변수는 함수 내에서 공유됨

  ※전역변수와 정적변수의 차이점
  -> 전역변수는 프로그램이 시작될 때 생성되고, 프로그램이 종료될 때 소멸됨
  -> 정적변수는 함수가 호출될 때 생성되고, 함수가 종료되어도 값이 유지됨
  -> 전역변수는 같은 이름을 가진 변수가 하나만 존재함(프로그램 전체에서 공유됨)
  -> 정적변수는 같은 이름을 가진 변수가 하나만 존재함(함수 내에서 공유됨)
  -> 전역변수는 프로그램 전체에서 접근 가능함
  -> 정적변수는 선언된 함수 내에서만 접근 가능함


 - 레지스터 변수 : CPU의 레지스터에 저장되는 변수(register)
  -> 일반적으로 지역변수는 스택 메모리에 저장됨
  -> 지역변수는 함수가 호출될 때 생성되고, 함수가 종료되면 소멸됨
  -> 지역변수는 같은 이름을 가진 변수가 여러 개 존재할 수 있음(각각의 지역에서 독립적으로 존재)
  -> 전역변수는 프로그램이 시작될 때 생성되고, 프로그램이 종료될 때 소멸됨
  -> 전역변수는 같은 이름을 가진 변수가 하나만 존재함(프로그램 전체에서 공유됨)
  -> 정적변수는 함수가 호출될 때 생성되고, 함수가 종료되어도 값이 유지됨
  -> 정적변수는 같은 이름을 가진 변수가 하나만 존재함(함수 내에서 공유됨)
  -> 레지스터 변수는 CPU의 레지스터에 저장되므로 접근 속도가 빠름
  -> 레지스터 변수는 일반적으로 지역변수로 선언됨
*/

//변수의 종류 예제 + 레지스터 변수 예제
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <time.h>
void funcA(); //함수 원형 선언
void funcB(); //함수 원형 선언
void funcC(); //함수 원형 선언
void funcD(); //함수 원형 선언+레지스터 변수 예제

int gVar = 0; //전역변수 선언 및 초기화
int main() {
    while (1)
    {
        static int count = 1; //static 변수의 초기화는 한번만 수행됨
        printf("함수 호출 횟수: %d\n", count++);
        funcA();
        funcB();
        funcC();
        funcD();
        printf("전역변수 gVar의 값: %d\n", gVar);
        printf("\n");
        system("pause");
        system("cls");
    }
    return 0;
}
void funcA() {
    int a = 0; //지역변수 선언 및 초기화
    static int sa = 0; //정적변수 선언 및 초기화
    a++;
    sa++;
    gVar++;
    printf("funcA() 지역변수 a의 값: %d\n", a);
    printf("funcA() 정적변수 sa의 값: %d\n", sa);
    printf("funcA() 전역변수 gVar의 값: %d\n", gVar);
}
void funcB() {
    int b = 0; //지역변수 선언 및 초기화
    static int sb = 0; //정적변수 선언 및 초기화
    b++;
    sb++;
    gVar++;
    printf("funcB() 지역변수 b의 값: %d\n", b);
    printf("funcB() 정적변수 sb의 값: %d\n", sb);
    printf("funcB() 전역변수 gVar의 값: %d\n", gVar);
}
void funcC() {
    int c = 0; //지역변수 선언 및 초기화
    static int sc = 0; //정적변수 선언 및 초기화
    c++;
    sc++;
    gVar++;
    printf("funcC() 지역변수 c의 값: %d\n", c);
    printf("funcC() 정적변수 sc의 값: %d\n", sc);
    printf("funcC() 전역변수 gVar의 값: %d\n", gVar);
}

void funcD() {
    register int rVar = 0; //레지스터 변수 선언 및 초기화
    rVar++;
    printf("funcD() 레지스터 변수 rVar의 값: %d\n", rVar);
}

//레지스터 변수의 장점
//레지스터 변수는 CPU의 레지스터에 저장되므로 접근 속도가 빠름
//따라서 반복문에서 많이 사용되는 변수를 레지스터 변수로 선언하면 성능이 향상될 수 있음
//단, 레지스터 변수는 선언된 함수 내에서만 유효하며, 포인터 연산이 불가능함
//또한, 레지스터 변수는 컴파일러가 실제로 레지스터에 저장할지 여부를 결정하므로
//반드시 레지스터에 저장된다는 보장은 없음
//따라서 레지스터 변수는 성능 향상을 위한 힌트로 사용되며, 반드시 사용해야 하는 것은 아님
//C++17부터는 레지스터 변수는 더 이상 사용되지 않음
//대신 컴파일러가 최적화를 통해 자동으로 레지스터에 저장할 변수를 결정함 >> 안 써도 됨